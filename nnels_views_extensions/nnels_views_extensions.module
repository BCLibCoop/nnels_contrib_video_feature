<?php

include_once 'nnels_views_extensions.features.inc';

/**
 * Implements hook_views_api().
 */
function nnels_views_extensions_views_api() {
  return array ('api' => 3.0);
}

function nnels_views_extensions_views_default_views() {
  // Check for all view file in views directory
  $files = file_scan_directory(drupal_get_path('module', 'nnels_views_extensions') . '/views', '/.*\.inc$/');

  // Add view to list of views
  foreach ($files as $filepath => $file) {
    require $filepath;
    if (isset($view)) {
      $views[$view->name] = $view;
    }
  }

  // At the end, return array of default views.
  return $views;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function nnels_views_extensions_entity_property_info_alter
(&$info) {
  $info['node']['properties']['lsn_001'] = array(
    'type' => 'token',
    'label' => t('Local System Number (LSN)'),
    'description' => t('MARCXML Controlfield 001 - Local System Number'),
    'sanitized' => FALSE,
    'getter callback' => 'nnels_views_extensions_property_lsn001_getter',
  );
}

function nnels_views_extensions_property_lsn001_getter(
  $item ){

  $lsn = NULL;
  try {
    $stub = unserialize($item->field_xml_stub[LANGUAGE_NONE][0]['value']);
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage());
  }

  if (isset($stub)) {
    $lsn = $stub['controlfields']['001']['value'];
  }

  return $lsn;
}

/**
 * Implements hook_views_pre_view
 * @param $view
 * Utility for cataloguers to export records with BISAC subject terms applied
 * Can be re-purposed for pre-computing many expensive filter queries
 */
function nnels_views_extensions_views_pre_view(&$view) {

  if ( in_array( $view->name,['field_collection_view_marcxml_file_builder'] )) {

    if ($view->display_handler->display->id == "record_set_checkout_taxonomy_subquery") {
      $filters = $view->display_handler->get_option('filters');

      if (isset($filters['field_subject_tid'])) {

        $BISAC_terms = array(); //default

        //Check if we have the list cached
        if (!cache_get('bisac_subject_tids')) $BISAC_terms =
          nnels_views_extensions_build_BISAC_term_list();
        else $BISAC_terms = cache_get('bisac_subject_tids')->data;

        //First mode is BISAC-only
        $filters["field_subject_tid"]["group_info"]["group_items"][1]["value"]
          = [$BISAC_terms];
        //Second mode is Non-BISAC (exclude)
        $filters["field_subject_tid"]["group_info"]["group_items"][2]["operator"] = "not";
        $filters["field_subject_tid"]["group_info"]["group_items"][2]["value"]
          = [$BISAC_terms];
        //Override what's baked in default
        $view->display_handler->override_option('filters', $filters);
      }
    }
  }
}

/**
 * Cache a pre-computed list of BISAC Subject Term IDs for later filtering
 * @return array|bool
 */
function nnels_views_extensions_build_BISAC_term_list() {
  //BISAC regex pattern, could be improved
  //E.g. YOUNG ADULT FICTION / Magical Realism, DRAMA /
  $BISAC_pattern = "/^[A-Z]{2,}\s?.*\s\/\s?/";
  $BISAC_found = [];

  if ($subject_taxonomy = taxonomy_vocabulary_machine_name_load
  ('subject')) {
    $efq = new EntityFieldQuery();
    $result = $efq->entityCondition('entity_type', 'taxonomy_term')
      ->propertyCondition('vid', $subject_taxonomy->vid)
      ->propertyOrderBy('weight')
      ->execute();
    if (!empty($result['taxonomy_term'])) {
      $terms = taxonomy_term_load_multiple(array_keys($result['taxonomy_term']));
      foreach ($terms as $term) {
        if ($matched = preg_match($BISAC_pattern, $term->name)) {
          $BISAC_found[] = $term->tid;
        }
      } //end term loop
      if (! empty($BISAC_found))
        cache_set('bisac_subject_tids', $BISAC_found);
      else return FALSE;
    }
  }
  return $BISAC_found;
}
