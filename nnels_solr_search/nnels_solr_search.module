<?php
/**
 * @file
 * Code for the NNELS Solr Search feature.
 */

include_once 'nnels_solr_search.features.inc';

/**
 * Implements hook_menu().
 */
function nnels_solr_search_menu() {
  $items['admin/config/nnels/certified-accessible'] = array(
    'title' => 'Certified Accessibility Settings',
    'description' => 'Settings for the certified accessibility feature of the solr search and repo item view.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nnels_solr_search_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'nnels_solr_search.admin.inc',
    'file path' => drupal_get_path('module', 'nnels_solr_search'),
  );
  return $items;
}

/**
 * Implements hook_node_load().
 */
function nnels_solr_search_node_load($nodes, $types) {

  // Make sure the accessible propertys are attached to the node.
  foreach ($nodes as $node) {
    if ($node->type == 'repository_item') {
      $node->certified_accessible = nnels_solr_search_certified_accessible_getter_callback($node);
      $node->certified_accessible_by = nnels_solr_search_certified_accessible_by_getter_callback($node);
    }
  }
}

/**
 * Implements hook_field_collection_item_load()).
 */
function nnels_solr_search_field_collection_item_load(array $entities) {

  // Make sure the custom file format property is attached to the field
  // collection.
  foreach ($entities as $entity) {
    if ($entity->field_name == 'field_file_resource') {
      $entity->file_format = nnels_solr_search_file_format_getter_callback($entity);
    }
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function nnels_solr_search_entity_property_info_alter(&$info) {
  $node_properties = &$info['node']['bundles']['repository_item']['properties'];

  // Create this custom property of the repository_item node type that
  // calculates whether one of the file resources attached to the node are
  // certified accessible, using the certified_accessible field.
  $node_properties['certified_accessible'] = array(
    'label' => t('Certified Accessible'),
    'type' => 'integer',
    'description' => t('Certified Accessible Computed Field.'),
    'getter callback' => 'nnels_solr_search_certified_accessible_getter_callback',
    'computed' => TRUE,
  );

  // Create this custom property of the repository_item node type that
  // calculates whether one of the file resources attached to the node are
  // certified accessible, using the certified_accessible_by field.
  $node_properties['certified_accessible_by'] = array(
    'label' => t('Certified Accessible By'),
    'type' => 'integer',
    'description' => t('Certified Accessible By Computed Field.'),
    'getter callback' => 'nnels_solr_search_certified_accessible_by_getter_callback',
    'computed' => TRUE,
  );

  $file_resource_properties = &$info['field_collection_item']['bundles']['field_file_resource']['properties'];
  // Create this custom property of the file_resource field collection that
  // returns the file type limited by the availablity/status field.
  $file_resource_properties['file_format'] = array(
    'label' => t('File Format'),
    'type' => 'integer',
    'description' => t('File format limited by availability/status.'),
    'getter callback' => 'nnels_solr_search_file_format_getter_callback',
    'computed' => TRUE,
  );
}

/**
 * Certified Accessibility Getter Callback.
 * 
 * Determine whether the repo item is certified accessible.
 */
function nnels_solr_search_certified_accessible_getter_callback($item) {
  if (variable_get('nnels_certified_accessibility_taxonomy', FALSE)) {
    $file_resources = field_get_items('node', $item, 'field_file_resource');
    if ($file_resources) {

      // Load all terms with the required certified field checked. The
      // 'Accessibility Tags' Taxonomy has a field called 'Required for
      // Certification' that tells which terms control the certified accessible
      // icon.
      $certified_accessibility_tags = db_select('field_data_field_required_for_certification', 'r')
        ->fields('r', ['entity_id'])
        ->condition('r.field_required_for_certification_value', 1)
        ->groupBy('r.entity_id')
        ->execute()
        ->fetchCol('entity_id');
      if (count($certified_accessibility_tags)) {

        $file_resource_ids = array();
        foreach ($file_resources as $file_resource) {
          $file_resource_ids[$file_resource['value']] = TRUE;
        }
        $file_resource_entities = field_collection_item_load_multiple(array_keys($file_resource_ids));
        foreach ($file_resource_entities as $file_resource_entity) {
          $accessibility_tags = field_get_items('field_collection_item', $file_resource_entity, 'field_accessibility_tags');
          if ($accessibility_tags) {
            $accessibility_tags = array_column($accessibility_tags, 'tid');

            // Expecting $diff to be empty if all of the required tags are present
            // in the attached tags.
            $diff = array_diff($certified_accessibility_tags, $accessibility_tags);
            if (empty($diff)) {
              return 1;
            }
          }
        }
      }
    }
  }
}

/**
 * Certified Accessibility By Getter Callback.
 * 
 * Determine whether the repo item is certified accessible by.
 */
function nnels_solr_search_certified_accessible_by_getter_callback($item) {
  $file_resources = field_get_items('node', $item, 'field_file_resource');
  if ($file_resources) {
    $file_resource_ids = array();
    foreach ($file_resources as $file_resource) {
      $file_resource_ids[$file_resource['value']] = TRUE;
    }
    $file_resource_entities = field_collection_item_load_multiple(array_keys($file_resource_ids));
    foreach ($file_resource_entities as $file_resource_entity) {
      if (field_get_items('field_collection_item', $file_resource_entity, 'field_certified_accessible_by')) {
        return 1;
      }
    }
  }
}

/**
 * File Format Getter Callback.
 * 
 * Determine file resource file format.
 */
function nnels_solr_search_file_format_getter_callback($item) {
  $file_format = field_get_items('field_collection_item', $item, 'field_file_format');
  $file_status = field_get_items('field_collection_item', $item, 'field_availability_status');
  if ($file_format && $file_status && in_array($file_status[0]['value'], [1, 2, 3, 88, 99])) {
    return $file_format[0]['value'];
  }
}

/**
 * Implements hook_facet_items_alter().
 */
function nnels_solr_search_facet_items_alter(&$build, &$settings) {
  if ($settings->realm == 'block') {
    if ($settings->facet == 'certified_accessible') {
      if (!empty($build[1])) {
        $build[1]['#markup'] = t('NNELS certified accessible');
      }
    }
    if ($settings->facet == 'certified_accessible_by') {
      if (!empty($build[1])) {
        $build[1]['#markup'] = t('Yes');
      }
    }
    if ($settings->facet == 'field_file_resource:file_format') {
      $field_config = field_info_field('field_file_format');
      $allowed_values = $field_config['settings']['allowed_values'];
      foreach ($build as $index => $value) {
        $build[$index]['#markup'] = $allowed_values[$index];
      }
    }
  }
}
